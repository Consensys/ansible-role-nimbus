---
- name: Add basics to the validator cmdline_args
  set_fact:
    nimbus_validator_cmdline_args: >
      {{nimbus_validator_cmdline_args}}
      --data-dir={{nimbus_validator_data_dir}}
      --log-format=json
      --log-level={{nimbus_log_level}}
      --log-file={{nimbus_log_dir}}/validator.log
      --non-interactive
      --doppelganger-detection
      --beacon-node='{{nimbus_validator_beaconnodes}}'
      --validators-dir={{nimbus_keys_dir}}
      --secrets-dir={{nimbus_secrets_dir}}
      --suggested-fee-recipient={{nimbus_default_fee_recipient}}

- name: Add keymanager to the validator cmdline_args
  set_fact:
    nimbus_validator_cmdline_args: >
      {{nimbus_validator_cmdline_args}}
      --keymanager
      --keymanager-port={{ nimbus_keymanger_port }}
      --keymanager-address='{{nimbus_keymanger_interface}}'
      --keymanager-allow-origin={{ nimbus_keymanager_cors }}
      --keymanager-token-file={{nimbus_keymanager_token_file}}
  when: nimbus_keymanager_token_file != ""

- name: Add metrics to the validator cmdline_args
  set_fact:
    nimbus_validator_cmdline_args: >
      {{nimbus_validator_cmdline_args}}
      --metrics
      --metrics-address='{{ nimbus_metrics_interface}}'
      --metrics-port={{ nimbus_validator_metrics_port}}
  when: nimbus_metrics_enabled|bool == True

- name: Add graffiti to the validator cmdline_args
  set_fact:
    nimbus_validator_cmdline_args: >
      {{nimbus_validator_cmdline_args}}
      --graffiti='{{ nimbus_graffiti }}'
  when: nimbus_graffiti != ""

- name: Add custom cli args if provided
  set_fact:
    nimbus_validator_cmdline_args: >
      {{nimbus_validator_cmdline_args}}
      {{ nimbus_validator_custom_cmdline_args }}
  when: nimbus_validator_custom_cmdline_args != ""

- name: Sanitize validator cmdline_args
  set_fact:
    nimbus_validator_cmdline_args: "{{nimbus_validator_cmdline_args | replace('\n', '') | replace('\"', '')}}"

- name: Show validator cmdline_args
  debug:
    msg: "{{nimbus_validator_cmdline_args}}"

- name: Create nimbus-validator systemd service
  template:
    src: "nimbus-validator.service.j2"
    dest: "{{ nimbus_systemd_dir }}/nimbus-validator.service"
    owner: "root"
    group: "root"
  become: true
  register: validator_systemd_file

- name: Set updated optionally to trigger a systemd restart at the end
  set_fact:
    nimbus_state_updates_validator: "{{ nimbus_state_updates_validator + ['nimbus.validator_systemd_file'] }}"
  when: validator_systemd_file is changed

- name: Reload systemd to reread configs
  systemd:
    daemon_reload: yes
  become: true
  when: validator_systemd_file is changed

- name: Enable and start nimbus-validator service
  systemd:
    name: nimbus-validator
    state: "{{ nimbus_systemd_state }}"
    enabled: true
  become: true
  when: nimbus_state_updates_validator|length > 0 
